package DeepClone;

use 5.010;
use strict;
use warnings;
use DDP;

=encoding UTF8

=head1 SYNOPSIS

Клонирование сложных структур данных

=head1 clone($orig)

Функция принимает на вход ссылку на какую либо структуру данных и отдаюет, в качестве результата, ее точную независимую копию.
Это значит, что ни один элемент результирующей структуры, не может ссылаться на элементы исходной, но при этом она должна в точности повторять ее схему.

Входные данные:
* undef
* строка
* число
* ссылка на массив
* ссылка на хеш
Элементами ссылок на массив и хеш, могут быть любые из указанных выше конструкций.
Любые отличные от указанных типы данных -- недопустимы. В этом случае результатом клонирования должен быть undef.

Выходные данные:
* undef
* строка
* число
* ссылка на массив
* ссылка на хеш
Элементами ссылок на массив или хеш, не могут быть ссылки на массивы и хеши исходной структуры данных.

=cut

my $CYCLE_ARRAY = [ [4, 8, 9], 1, 2, 3 ];
$CYCLE_ARRAY->[4] = $CYCLE_ARRAY;
$CYCLE_ARRAY->[5] = $CYCLE_ARRAY;

my $CYCLE_HASH = { a => 1, b => 2 };
$CYCLE_HASH->{c} = $CYCLE_HASH;
$CYCLE_HASH->{d} = $CYCLE_HASH;

my $TESTS = [
    {
        name => 'simple undef',
        orig => undef,
    },
    {
        name => 'simple num',
        orig => 10,
    },
    {
        name => 'simple string',
        orig => 'string',
    },
    {
        name => 'nums array',
        orig => [ 1, 2, 3, 4 ],
        modifier => sub { $_[0]->[0] = 'a' },
    },
    {
        name => 'strings array',
        orig => [ qw/a b c d e f/ ],
        modifier => sub { $_[0]->[0] = 1 },
    },
    {
        name => 'combined array',
        orig => [ 1, 2, qw/a b c d e f/, 3, 4 ],
        modifier => sub { $_[0]->[0] = undef },
    },
    {
        name => 'simple hash',
        orig => { a => 1, b => 2, c => 'x', d => 'y', 1 => 1, 2 => 2, 3 => 'v1', 4 => 'v2' },
        modifier => sub { $_[0]->{a} = 10 },
    },
    {
        name => 'array of hashes',
        orig => [ { a => 1, b => 2}, { c => 3, d => 4 } ],
        modifier => sub { $_[0]->[1]{c} = 10 },
    },
    {
        name => 'hash of arrays',
        orig => { a => [ 1, 2, 3 ], b => [ 4, 5, 6 ] },
        modifier => sub { $_[0]->{b}[1] = 10 },
    },
    {
        name => 'complex struct',
        orig => { 
            a => [ 1, 2, 3 ], 
            b => { c => 4, d => 5 }, 
            e => [ 
                { 
                    k1 => 'v1', 
                    k2 => [ qw/a b c/], 
                    k3 => undef, 
                    k4 => { kk1 => 'x', kk2 => 'y' },
                },
                [ qw/x1 x2 x3/ ],
                undef,
                1, 2, 3, qw/a b c/,
            ],
            f => {
                k1 => 'v1',
                k2 => [ qw/a b c/ ],
                k3 => undef,
                k4 => { kk1 => 'x', kk2 => 'y', kk3 => [ qw/a b c/ ], kk4 => { a => 1, b => 2 } },
            },
            g => 1,
            h => 'string',
            i => undef,
        },
        modifier => sub { $_[0]->{f}{k4}{kk3}[1] = 10 },
    },
    {
        name => 'cycle array',
        orig => $CYCLE_ARRAY,
        modifier => sub { $_[0]->[20] = 10 },
    },
    {
        name => 'cycle hash',
        orig => $CYCLE_HASH,
        modifier => sub { $_[0]->{new_key} = 10 },
    },
    {
        name => 'sub ref',
        orig => sub {},
        want_undef => 1,
    },
    {
        name => 'complex with sub ref',
        orig => [ 1, 2, 3, { a => 1, b => 2, c => [ qw/x y z/, sub {} ] } ],
        want_undef => 1,
    },
];

my $TEST2 = [
 [0, 1, 2],
 [10, 20, 30]
];

my %h;

sub clone {
	my $orig = shift;
        my $last = shift;
	my $cloned = undef;
        if (ref $orig eq 'ARRAY') {
            if (exists $h{$orig}) {
                $cloned = $h{$orig};
            } else {
                my @arr;
                $h{$orig} = \@arr;
                for my $i(0..$#$orig) {
                    $arr[$i] = clone(@$orig[$i]);
                }
                $cloned = \@arr;
            }   
        }
        if (ref $orig eq 'HASH') {
            if (exists $h{$orig}) {
                $cloned = $h{$orig};
            } else {
                my %hash;
                $h{$orig} = \%hash;
                for my $key(keys %$orig) {
                    $hash{$key} = clone(${$orig}{$key});
                }
                $cloned = \%hash;
            }   
        }
        $cloned = $orig unless (ref $orig);
        $cloned = undef if (ref $orig eq 'CODE');
	return $cloned;
}
p clone($TESTS);
1;
