#!/usr/bin/perl

use strict;
use warnings;
<<<<<<< HEAD
use 5.010;
use DDP;
=======
our $VERSION = 1.0;

my $filepath = $ARGV[0];
die "USAGE:\n$0 <log-file>\n"  unless $filepath;
die "File '$filepath' not found\n" unless -f $filepath;

my $parsed_data = parse_file($filepath);
report($parsed_data);
exit;

sub get_min {
    my $s = shift;
    $s =~ /([^:]*:+[^:]*:+[^:]*)/;
    return $1;
}

sub parse_file {
    my $file = shift;

<<<<<<< HEAD
    my %res_h;
    my $result;
    my %use;
    my $total_count;
    my %h_m;
    open my $fd, "-|", "bunzip2 < $file" or die "Can't open '$file': $!";
=======
    # you can put your code here

    my $fd;
    if ($file =~ /\.bz2$/) {
        open $fd, "-|", "bunzip2 < $file" or die "Can't open '$file' via bunzip2: $!";
    } else {
        open $fd, "<", $file or die "Can't open '$file': $!";
    }

    my $result;
>>>>>>> upstream/master
    while (my $log_line = <$fd>) {
        $log_line =~ /(?<IP>\S+)\s+\[(?<time>\N*)\]\s+\"\N*\"\s+(?<status>\S+)\s+(?<cnt_b>\S+)\s+\"\N*\"\s+\"\N*\"\s+\"(?<coef>\N*)\"/;
        my $IP = $+{'IP'}; my $time = $+{'time'}; my $status = $+{'status'}; my $cnt_b = $+{'cnt_b'}; my $coef = $+{'coef'};
        $coef = 1 if ($coef eq "-");
        $total_count++;
        $h_m{get_min($time)} = 1;
        
        $res_h{$IP}->{"count"}++;
        $res_h{$IP}->{"data"} = 0 if (!$res_h{$IP}->{"data"});
        $res_h{$IP}->{"data"} += $cnt_b * $coef if ($status eq "200");
        $res_h{$IP}->{$status} += $cnt_b;
        $res_h{$IP}->{"min"}->{get_min($time)}++;

        $use{$status} = 1;
    }
    close $fd;
    my @arr_data;
    for my $key(keys %use) {
        push @arr_data, $key;
    }
    @arr_data = sort @arr_data;
    my @head = ("IP", "count", "avg", "data", @arr_data);
    
    my @table;
    for my $key (keys %res_h) {
        my @a;
        push @a, $key, $res_h{$key}->{"count"}, $res_h{$key}->{"count"} / (scalar keys $res_h{$key}->{"min"}), $res_h{$key}->{"data"} / 1024;
        for my $var(@arr_data) {
            if (!$res_h{$key}->{$var}) {
                push @a, 0;
            } else {
                push @a, $res_h{$key}->{$var} / 1024;
            }
         }
         push @table, \@a;
    }
    @table = sort {$b->[1] <=> $a->[1]} @table; 

    my @total = ("total", $total_count, $total_count / (scalar keys %h_m));

    for my $var(@table) {
        for my $i(3..$#$var) {
            $total[$i] += $var->[$i];
        }
    } 

    push @$result, \@head;
    push @$result, \@total;
    for my $i(0..9) {
        push @$result, $table[$i];
    }    
    return $result;
}

sub report {
    my $result = shift;
    for my $var(@$result) {
        next if ($var->[0] eq "IP");
        $$var[2] = sprintf("%.2f", $$var[2]);
        for my $i(3..$#$var) {
            $$var[$i] = int $$var[$i];
        }
    }
    for my $var(@$result) {
        say join "\t", @$var;
    }
}
